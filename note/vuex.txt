Lesson - 1 - What is Vuex

	Vuex is a state management pattern + library for Vue.js applications. It serves as a centralized store for all the components in an application, with rules ensuring that the state can only be mutated in a predictable fashion.


Lesson - 3 - setting up a central store

	**install vuex
		npm install vuex --save

	**its a tradition for vuex that to open a directory  call store -> store.js file 

	**import vuex and vue

		import Vue from 'vue'
		import Vuex from 'vuex'

		Vue.use(Vuex);

	*exporting 

	export const store = new Vuex.Store({

		state:{


        products: [
            {name: 'Banana Skin', price: 20},
            {name: 'Shiny Star', price: 40},
            {name: 'Green Shells', price: 60},
            {name: 'Red Shells', price: 80}
        ]

		}

	});


Lesson - 4 - Using computed properties

	state: is like data

	here we will use computer properties to populate those list item


	**first adding the state or importing it to the main.js

	import { store } from './store/store'

	 --use it in out vue instantace


	 	new vue({
	 	el:'#app'

	 	render:h=> h(App),
	 	store:store,


	 	}).$mount('#app');

	 *** we can grab the list item form store in two ways

	 	1.computed properties in every component a and grab the data from state 

	 		export default{

	 				comouted:{

	 					products:function(){

	 						retunr this.$store.state.products;
	 					}
	 				}

	 		}

	 		and adding it to list 

	 			<ul>

	 			<li v-for="product in products"></li>



	 			</ul>

	 	2.Mixins

	 		** first make a mixin


	 		mixins.js

	 		export default{

	 			computed:{

	 				products:function(){

	 					return this.$store.state.products;
	 				}

	 			}

	 		}


	 		--using it on components

	 		import listMixin from './mixins'

	 		export default{

	 			mixins:[listMixin],
	 		}

	 		use it 

	 			<ul>

	 			<li v-for="product in products"></li>

	 			</ul>


Lesson - 5 - getters 

	getter is like mixins to using one functionality to many component

	getter does not change the data itself but it change the outcoe or modify the data to show 


	export default { 


		state:{


		        products: [
            {name: 'Banana Skin', price: 20},
            {name: 'Shiny Star', price: 40},
            {name: 'Green Shells', price: 60},
            {name: 'Red Shells', price: 80}
        ]


		},

		getters:{

			salseProducts:state => {

				var saleProducts = state.products.map({

					return {

						name:'**'+product.name +'**',
						price:product.price / 2,
					}

				});

			}
		}
	}

	**using it by makin computer properties

		computer:{

			saleProducts:{

				return this.$store.getters.saleProducts
			}
		}


Lesson - 6 - Mutations

	mutation is like methods but its use in vuex for changing the state property directly. unlike getter which job is to change the outcome of the state prperty not the actual state

		**first step 
			go to store and after getters make an property called mutations:


			mutations:{

				reducePrice: state =>{

				state.products.forEach(product =>{



					product.price -= 1;

				});


				}
			}


		** now using it from the component


			when the methods is called

				reducePriceMethod:function(){


					//commiting the mutations
					this.$store.commit('reducePrice')

				}

		**strict mode 
			we can change state by calling normal methods too .by calling the strict object to true

			export const store = new Vuex({


				strict:true
			});



Lesson - 7 - actions 

	action are like middle ware in laravel . it work between mutation call and mutation perfom.we use it because some time we need to upate the data base or get data in between mutation work so we need action on the middle of that .


		**first step

			to make and action

				actions:{


					reducePrice:context =>{


						//to the mutation

						setTimeOut({
						context.commit('reudcePrice');
						},2000)
						


					}
				}

		**calling it from the component

			we do commit when we are calling a mutation but we will be calling a dispatch function when calling a actions

				//name of the action
				this.$store.dispatch('reducePrice')


		**with parameter

			--calling the method

				<button v-on:click="reducePrice(4)"> Reduce Price </button>

			-- method

			methods:{

				reducePrice:function(amount){
					//name of the action and the parameter
					this.$store.dispatch('reducePrice',amount)
				}
			}

		--receving at the action

			actions:{

			//context represent the whole component itself and payload is the function parameter
				reducePrice:(context,payload)=>{

				setTimeOut({

				context.commit('reduceprice',payload)

				},2000)

				);

				}
			}

		--from the mutation

			mutations:{

				reducePrice:(state,payload )=>{

				state.products.forEach(product =>{

				product.price = product.price - payload;

				});
				}


			}


Lesson - mapping actions and getters



	** npm install babel-preset-stage-2 dev-save
	register on babelrc 
		stage-2

		    import { mapActions} from 'vuex'
    		import { mapGetters} from 'vuex'

    		on computed properties

         ...mapGetters([

             'saleProducts'
         ])


         --on methods
         
         ...mapActions([
            'reducePrice'
         ])









