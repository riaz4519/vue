
Skip to content

    Pull requests
    Issues
    Marketplace
    Explore

    @riaz4519

1
0

    0

riaz4519/vue
Code
Issues 0
Pull requests 0
Projects 0
Wiki
Insights
Settings
vue/note/vueninja2.txt
a003823 5 hours ago
@riaz4519 riaz4519 after dynamic css
243 lines (117 sloc) 3.55 KB
Lesson - 1 - introduction

	<script src="vue.js"></script>

	just add the vue cdn link or download the file and add it to the html file and this is your installation

Lesson - 2 - vue instance
	
	* creating a vue js instance

		new Vue({

		});

		this is called the instance 
		it controlled part of the application or full application .one app can have one instance or multiple instance.

		* the instance will hold data ,method and all that.

		*property : el - element

			this property gonna define which part of the application this instance gonna control

				new Vue({

					el:"#app"

				});
		*property : data - 
			where we gonna store all of our data.

			data object-

			data:{

			},

			with in this curly brackets there will be different key value pairs.

			data:{

				name:"fahim"

			}

			for out put this data we just gonna go to our app and

			<h1>{{ name }}</h1>

			its because its controlling the data on #app .

Lesson - 3 - Data and methods
	
	*property - methods - its a object so it will be working like key ,value pairs .

		methods:{

		}

		**function declearation inside methods:

			methods:{

				greet:function(){

					return "good morning";

				}

			}
		**calling the function


		<h1>{{ greet() }}</h1>

		**function parameter

			<h1>{{ greet('hello world') }}</h1>

			methods:{

			greet:function(time){

			return "hello world "+time;

			}

			}

		** this property

			this.name not this.data.name 

Lession - 4 - Data Binding
	
	Binding data to attribute of html element.

		v-bind - directive

		example:
		<a v-bind:href="website">Google</a>

		**short hand for v-bind = :


		data:{

			website:"https://www.google.com/"

		}

		**v-html 
			this is for outputting html to the dom 

			: does not work with v-html . : sorthand only work with v-bind which is attribute binding

Lesson - 5 - Events

	events are for action

	** v-on or @

	example v-on:click="function" or @click="function"

	<button v-on:click="age++">Add sum</button>
	<button v-on:click="add">Add sum</button>

	methods:{

		add:function(){

			this.age++
		}

	}

	***Dubble click

		@dblclick or v-on:dblclikc

	***Getting the x and y with mousemove

		v-on:mousemove or @mousemove

		this fuction always trigger and send a event propery to the function 

		@mousemove="updateXY"

		updateXY:fuction(event){

		event.offsetX;
		event.offsetY;

		}

Lesson - 6 - Event modifiers
	
	event modifiers effect the normal behaviors of html element and events

	** once event modifiers

	@click.onece="add()" or v-on:click.once="add()"

	** prevent - event modifiers

	<a href=""v-on:click.prevent="click">click me</a>
	
	this link not be going to the link the we wil give to the href. it will trigger the click function

Lesson - 7 - Keyboard Events & keyup modifiers

	keyboard events are those which react on keyboard activities.

	v-on:keyup="function" or @keyup="function"

	**modifiers

		for spacific key

		v-on:keyup.enter="function"

		this function gonna run when we press on enter button on keyboard

	**two button once

		v-on:keyup.alt.enter="function"

Lession - 8 - two way data binding

	** v-model="name" 

	this property work as two way.

	<input type="text" v-model="name">

	whenever we type something on the input field it will be set the value to name and also update the value at browser

Lesson - 9 - computed properties

	computed property run when needed.

	computed:{

		addToA:function(){

		},
		addToB:function(){

		}

	}


Lesson - 10 - dynamic css

	adding class with v-bind:class="{}" and it must  be in single curly brackets

		v-bind:class="{red:true,blue:true}"

		red and blue are classes 

		 **doing it dynamicly

		 	data:{

		 		available:true,
		 		nearby:true,

		 	}

		 	now 

		 	v-bind:class="{available:available}"

		 	if "available is true then the elemnt will get he class of available"

		 	available = !available


		 ** with computer properties

		 computed :{

		 compClasses:function(){

		 	return {

		 		available:this.available,

		 	}

		 }



		 }


Lesson - 11 - conditionals
	
	** v-if  and v-show

	<p v-if="false"> show</p>

	the show message will not be shown on the screen .same with the v-show method

	**v-else-if=""

	**difference between v-if and v-show

		when we use v-if 

		<p v-if="false" ></p>

		then the <p> tag will disapear .on the other hand if we use v-show the <p> tags style will become "display:none"


Lesson - 12 - looping with v-for 

	v-for is use for looping in vue js 

	** example first dimension array

		characters:['fahim','naiem','mukim']

		<ul>

			<li v-for="character in characters">{{character}}</li>
		

		</ul>

	**example second dimension or object looping


		ninja:[
		{name:'fahim',age:'23'}
		]


		<ul>

			<li v-for="ninja in ninjas">{{ninja.name}} -- {{ninja.age}}<li>

		</ul>

		**finding index

		<li  v-for="(ninja,index) in ninjas"> </li>


		** loop through <template></template>


		when we usually loop through any elemnet it loop the the element like 

		<li v-for="ninja in ninjas"></li>

		But with <template></template> it does not work like that . <template loop through its child element.

			<template v-for="(ninja,index) in ninjas">

				<h1>{{ ninja }}</h1>

			</template>

		** Cycle through object in nested for

		<template v-for="ninja in ninjas">
		<div v-for="(val,key) in ninja">
		{{ val}}{{ key}}
		</div>
		</template>

**Multiple Vue Instance
	
	var one = new Vue({

		el:"#app1",

	})

	var two = new Vue({

		el:"#app2",

	})

	now by these two vue instance variable we can change or add data to one another instance or from outside of the instance

<<<<<<< HEAD
=======
Lesson - 15 - component - 

	is re-useable object 


    var data = {
        name:'hello'
    }
    Vue.component('greetings',{

        template:'<p>Hello world {{ name }}<button v-on:click="changeName">chnage</button></p>',
        data:function () {
            return{
                name:'fahim',
            }
        },
        methods: {
            changeName: function () {

                this.name = 'Mukim';

            }
        }

    });

    var app1 = new Vue({

        el:"#app1",



    });

    var app2 = new Vue({

        el:"#app2",

    });


Lesson - 16 - REFS
	
	Ref is use like a id or a class to identify them.
	example 

	<input  type="text" ref="input">

	so this is how we declear ref

	** now to access it

		methods:{

			getName:function{

				this.$refs.nameOfTheRef.propertyname

			}

		} 



Lesson - 17 -The vue cli

	**install enviornment

		npm install -g @vue/cli

	**Version
		vue --version

	**create vue js application
		vue init webpack-simple <name of the project>
		or vue create <project name>

	**goto the project folder and run

		cd <project name>

		npm run serve


Lesson - 18 - vue files and the root component

	so all the coding and componet goes to the src folder .first we will find a main.js file and App.vue file .main.js file is for rendering our component to the website and App.vue is the component that we will have in our website.

	main.js

		import Vue from 'vue'
		import App from './App.vue'

		Vue.config.productionTip = false;


		new Vue({
		el:'#app',
		render: h => h(App),
		})

		this is the normal file of vue js .so there is many things to describe

		1. import statement which is a ES6 feature . that import the component from other folder. 

	App.vue

		.vue is the representer of vue component.

		<template></template> for wrapper element for representing component inside. there will be a main wrapper <div id='app'> which is the main div for holding all the element of the component

			<template>

				<div id="appp">

					here goes all the element

				</div>



			</template>

		** export default

		we will have all the scripting for the component in 		
		export default{

			data(){
				return {
					title:'hello wolr'
				},

			methods:{

			}
			}

		}



Lesson - 19 - nesting and importing components

	nesting is use for using component with in a component.

	**creating a component

		my prefer is for creating a child component first create a folder and then create the component.

		create .vue file

			<template>
			    
			    <ul>
			        <li></li>
			    </ul>
			    
			</template>

			<script>
			    
			    export  default {
			        
			        data(){
			            
			            return {
			                title:'Ninja app',
			            }
			        }
			        
			    }
			    
			</script>

			<style>
			    
			</style>


		Basic structure of a vue file

		local and global use of component

		Local:

			for using a component locally we have to import it to that file say app.vue file.and then we can use it

			<script>

				import Ninjas from './component/ninja.vue',

				export default {

					components:{

						'ninjas':Ninjas

					}

				}

			</script>


		global:

			for declear a component globally ,it had to be defined with in the main.js folder

				import Ninjas from './component/ninjas.vue'

				Vue.component('ninja',Ninjas);


				then we can access this component from anywhere in the app



Lesson - 20 - Component css

	a component need only just one root element

	when we style on root or nested component the style work with both of them .So how do we do it in component specific 

	example:with scoped


	<style scoped>

	</style>


Lesson - 21 - Component example

	./ == means current directory in vue js

	** every component must have a root element after the <template></template>

	Learned many things but in practical 
		1.made a template with header,footer and with the main body
		2.imported multiple component and included in App.Vue

		import Header from './components/Header.vue'
		import Footer from './components/Footer.vue'

		components:{

			'app-header' : Header,
			'app-footer' : Footer


		}
		3.added scoped css
		4.worked with array which is multidimentional


Lesson - 22 - Props

	send data to the child component from the parent component 


	** two steps passing and reciving

	----passing from parent component

	<app-main v-bind:ninjas="ninjas"></app-main>

	----reciving in child component

	export default{

		props:['nameof the attribute']

	}

	** prop Validation

		props:{

			ninjas:{

				type:Stringn/Array,
				required:true
			}

		}

Lesson - 23 - Primitive vs Reference type 

	Primitive : string,boolean and number 

	Reference type : Object,Array

	***Reference type:

		if we use reference type if we edit it in one place it will be edited in the other places to 

	**primitive types:

	it will just change in the component



Lesson - 24 Events(child to parent) $emit

	This behavior allows to change premitive type variable on root component .

	**

	<p v-on:click="changeTitle">{{ title }}</p>


	methods:{


	changeTitle:function(){


		this.$emit('changeTitle','vue Wizard');

	}

	}

	// root component

	<app-header  v-on:changeTitle="UpdateTitle($event)"></app-header>




	methods:{

	updateTitle:function(updated_title){

		this.title = updatedtitle;
	}

	}


Lessson - 25 - The Event Bus

	Event bus help to change value in diffrent components at the same time without using the root component

	**creating bus Vue object on main.js

		export const bus = new Vue()

	**import from the component where you want to use.

		import { bus } from '../main'

	**the triggering function

		<p v-on:click="titleChanged"></p>



		methods:{


			titleChanged:function(){


				this.title = 'Vue Wizard';

				bus.$emit('titleChanged','Vue Wizard')

			}


		}

	**reciving / other component that will be change

		created(){

			bus.$on('titleChanged',(data) => {

				this.title = data;

			})

		}


Lesson - 26 - Life cycle hooks

	        beforeCreate(){
            alert('before create');

        },
        created(){
            alert('created');
        },
        beforeMount(){

            alert('before mounted');

        },
        mounted(){

            alert('mounted');
        },
        beforeUpdate(){
            alert('before update');
        },
        updated(){

            alert('updated');
        }


Lesson - 27 - slots

	slots is the way of sending data to a component .its simillar like prop

		<form-helper>

			<h2>i am the h 2 </h2>
			<p>I am the paragraph</p>
		</form-helper>

		* viewing this on browser

			<template>



				<div>

					<h1> this is the form-helper component

					<slot></slot>
				</div>

			</template>

			it will apear as many time as we want just have to place <slot></slot>

			** specific placement of slots -naming slots


		<form-helper>

			<h2 slot='title'>i am the h 2 </h2>
			<p slot='text'>I am the paragraph</p>

		</form-helper>

			--output

				<template>

				<div>
					<slot name='title'></slot>
					<slot name='text'></sloat>

				</div>

				</template>

		* we can make editable template with slot

			<template>

		    <div>
		        <h1>Please fill out our form...</h1>
		        <form>
		            <div id="form-header">
		                <slot name="form-header"></slot>
		            </div>
		            <div id="form-fields">
		                <slot name="form-fields"></slot>
		            </div>
		            <div id="form-controls">
		                <slot name="form-controls"></slot>
		            </div>
		            <div id="useful-links">
		                <ul>
		                    <li><a href="#">link 1</a></li>
		                    <li><a href="#">link 2</a></li>
		                    <li><a href="#">link 3</a></li>
		                    <li><a href="#">link 4</a></li>
		                </ul>
		            </div>
		        </form>
		    </div>

		</template>

		** giving data 

			<form-helper>


			<div slot="form-header">

			<h3>This is the title of the form</h3>
			<p>Information about the form</p>

			</div>
			<div slot="form-fields">
			<input type="text" placeholder="name" required>
			<input type="password" placeholder="password" required>

			</div>
			<div slot="form-controls">

			<button @click="handleSubmit">Submit</button>

			</div>

			</form-helper>



Lesson - 28 -Dynamic Component

	Dynamic components are used for traversing between component on click or on action as our will. we can do all that by Dynamic component


	**component keyword

		<component is="form-one"></component>

		sending component as data 

		data(){


		return {

			component:'form-one'

		}
		}

		<component v-bind:is='component'></component>

	**change component dynamicly with button click

	<button v-on:click="component ='form-one'">Show form one</button>
	<button v-on:click="component ='form-two'">Show form two</button>

	**keep-alive tag

	when we traverse from one component to another dynamically it does not contain the data it had . so for preserve those data to that component

	<keep-alive>

			<component v-bind:is='component'></component>
	</keep-alive>


Lessong - 29 -  Input Binding (Creating a blog, part 1)

		v-model

		lazy - it will work after all the data inserted and click tab .
		its an input modifier

		<input  type="text" v-model.lazy="">

Lesson - 30 - Checkbox Binding with v-model

	checkbox in vue js is done with model binding

	all the checkbox will have the same category model

	<input type="checkbox" value="whatever" v-model="category">


	data(){

	return {


		blog:{

		categories:[]
		}

	}
	}

	showing the categories after selected:

	<ul>

		<li v-for="category in categories">{{ category}} </li>
	</ul>


Lesson - 31 - select box


	<select v-model="author">
		<option>Fahim </option>
		<option>Naime </option>
		<option>Mukim</option>
	</select>



Lesson - 32 - http request

	we need  plugin - Vue-resource

	**instal 
	npm-install vue-resource --save

	that  will save  the plugin to our dependencies

	**use dependies main.js

		First import
			import VueResource from 'vue-resource'

			Vue.use(VueResource)

	**now implement
		on button click
			<button v-on:click="post">click</button>

			methods:{

				post:function(){


				this.$http.post('https://jsonplaceholder.typicode.com/posts',{

				title:this.blog.title,
				body:this.blog.content,
				userId:1,
				id:222,
                }).then(function (data) {

                    console.log(data);
                    this.submitted = true;
                });
				}

			}

			JSON PLACEHOLDER -rest api


			sending request post and getting response


Lesson - 33 -GET Request


		get is use for getting data 

			created() {

			this.$http.get('http://jsonplaceholder.typicode.com/posts').then(function(data){

			this.blogs = data.body.slice(0,10);
			
			});
			}

			slice(0,10) - use for getting how many data we want

Lesson - 34 - custom Directives 

	we use directives like v-for,v-show and many things .it does have their own behavior.In Vue js we can make our own directives and work with them.

	* structure of a dirctives 

		v-name:argument="'value'"


		we gonna manke it globally in main.js

		Vue.directive('name',{

			bind(el,binding,vnode){

				//all the action goes here

			}

		});

		**here 

			el = represent the element where this directive is being used

			binding = for the argument and the value passed through the directive 

			vnode = is for virtual node 

		**example



		**calling 
		///

		v-theme:column="'narrow'"

		///

		Vue.directive('theme',{

		bind(el,binding,vnode){

		if (binding.value == "wide"){

		  el.style.maxWidth = "1200px";

		}
		else if (binding.value == "narrow"){

		  el.style.maxWidth = "550px;"
		}

		if (binding.arg == 'column'){

		  el.style.background = '#ddd';
		  el.style.padding = '20px';
		}

		}
		});








	











>>>>>>> 43cc1a4d809b42eb606cbde464e1ce5d1abf35ec

			






	

	



	

	








