section 2 :

    4.what is vue js
        is a progressive JavaScript Framework.its light but
        have all the functionality as other framework  like
        react and angular.

    5.setting up vue instance

        -first link the cdn

        -create a div and with id app

            <div id="app">
            </div>

        - vue will control all the element inside this div

    6.vue instance

        new Vue({

            el:"#app",
            data:{
              title:'Becoming a vue ninja',
            },

        });

        -it control the application where id is #app

    7. Methods

        is a object

        - methods:{

            }

        -declare
            -method is an object

            methods:{

                greet(time){

                    return 'data';

                }
            }

        -calling  a method

            -{{ greet('param') }}

    8. Data Binding

        v-bind - is a directive

        we can bind attribute with it .and after binding we can execute variable ther
        like normal data object

       -how it works

            v-bind:name_of_the_attribute="variable"

            v-bind:href="url"

            -sort
                :href="url"


    9.Events

        -event is action in vue js

        -structure

            - v-on:nameOfTheEvent="data/method"

            <button v-on:click="data/method">

            -click event

                <button v-on:click="wage++"></button>
                <button v-on:click="increaseWage(5)"></button

            -dblclick

                <button v-on:dblclick=""></button>

    10. The Event Object

        when we click on the button it automatically file a event object

            <button @click="logEvent"></button>

            logEvent(e){


            }
            -
                logCoords(e){

                    this.coords.x = e.offsetX
                    this.coords.y = e.offsetY
                }

    11. Keyboard Events

        -keypress

            <input @keypress="dataPress">


            methods:{

                dataPress(e){

                    console.log(e.target.value)

                }


            }
        -keyup

        -kind of act like two way data binding

    12. Two-way Data Binding (v-model)

        -declare

            <input type="text" v-model="name">

        -it will update the filed name every time the value updates

    13. Modifiers

        - @click.alt="method"

        -@click.shift="method"

        -@click.prevent="method"

    14. Conditional Output with v-if

        -its a directive

        v-if="condition"

        v-else-if="condition"

        v-else

    15. Looping with v-for

        -is for iterating

        - v-for with array

            <ul>
                <li v-for="item in items>
                    {{items}}
                </li>

        - v-for with object

            <div v-for="ninja in ninjas>
                {{ninja.name}}
                {{ninja.age}}
            </div>

        - v-for with index

            <li v-for="(item,index) in items">

    ***Computed Properties

        -why we need computed properties
            -when we are running a method .All the method tha are being called to the vue page will execute .like if we call
            method a() and if there is a method b() at the page it will be called to .Where as in computed properties only that
            particular  method will be called.

            -creating

                computed:{

                    addToa:function(){


                    }

                }

    **dynamic Css

        v-bind:class="{nearby:true}"

        *computed properties will be called when a value of a computed properties are changed.

    **multiple vue instances

        we can create multiple instances in vue and control multiple part of the page. and also we can communicate between those
        instances.

        var one = new Vue({

            data:{
                title:"data"
            }

        })

        var two = new Vue({

            data:{
                title:"Second Data"
            }

            methods:{

                changeTitle(){

                    one.title = "Changed from two"
                }
            }
        })

    **intro to components

        Vue.components('nameOfTheComponents',{
            template:'<p> hey there i am re-useable {{name}} components </p><button v-on:click="changeName">Change Name</button>',

            data:function(){

                return{

                    name:"Fahim"

                }

            },
            methods:{
                changeName:function(){
                    this.name = "maria"
                }
            }
        })

        -use this components

            <div id="app">

                <nameOfTheComponents></nameOfTheComponents>
            </div>

                -it will show the value

    ***Refs
        -ref is like id in html

        -defining refs

            <input ref="nameOfTheRef">
        -accessing refs

            readRef:function(){

                console.log(this.$refs.nameOfTheRefs.propertyName)

                example:
                    this.$refs.input.value

            }





    16. The Vue CLI

        -install

            npm install -g @vue/cli

        -create project

            vue create cli1

        -run

            npm run serve

    17. Components & Vue Files

        -running local serve

            npm run serve

        -index

            public/index  is the main file to build and run the website

        -src folder

            place for component and script

        -main.js

        - .vue is the extension

        -each component can have only one root element

        -export default allows us to import file

        - app.vue is the root component

    18. The data() Function

        -each component get its on data object

        -any template start with

            <template>
                -here will be a root component
            </template>

            -then a script tag

                <script>
                    export default{

                        data(){

                            return{

                            -here goes the data properties
                            }

                            }


                        }

                    }

                </script

                -style

    19. Nesting Components

        -in the main component we can nest other component

        -name of the vue file start with capital

        -importing a component

            import navbar from './component/Navbar'

        -making it a available for the component

            export default{

                name:"app",
                components:{
                    Navbar or navbar/Navbar:Navbar
                }
                },

                data(){
                }


            }
        -insert the component

            <template>

               <div>
                    <Navbar/>
               </div>

            </template

    *nesting components example

        -scoped

            its a keyword used for use css only to that page or that vue template.

        -header

            <template>
                <header>
                    <h1>{{ title}}</h1>
                </header>
            </template>

            <script>
                export default {
                    name: "Header",
                    data:function () {

                        return {
                            title:'My First App'
                        }
                    }
                }
            </script>



        -footer

            <template>

                <footer>
                    <p>{{ copyright}}</p>
                </footer>

            </template>

            <script>
                export default {
                    name: "Footer",
                    data:function () {

                        return {
                            copyright:"Copyright 2019 Fahim"
                        }
                    }
                }
            </script>



        -main content or ninjas

            <template>
                <div id="ninjas">

                    <ul>
                        <li v-for="ninja in ninjas" v-on:click="ninja.show = !ninja.show">
                            <h2>{{ ninja.name }}</h2>
                            <h3 v-show="ninja.show">{{ ninja.speciality }}</h3>
                        </li>
                    </ul>
                </div>

            </template>

            <script>
                export default {
                    name: "Ninjas",
                    data:function () {

                        return {
                            ninjas:[
                                {name: 'Ryu', speciality: 'Vue Components', show: false},
                                {name: 'Crystal', speciality: 'HTML Wizardry', show: false},
                                {name: 'Hitoshi', speciality: 'Click Events', show: false},
                                {name: 'Tango', speciality: 'Conditionals', show: false},
                                {name: 'Kami', speciality: 'Webpack', show: false},
                                {name: 'Yoshi', speciality: 'Data Diggin', show: false}
                            ]
                        }
                    }
                }
            </script>



        -main app vue

            <template>
              <div id="app">
                <app-header></app-header>
                <app-ninjas></app-ninjas>
                <app-footer></app-footer>

              </div>
            </template>

            <script>

              import Header from './components/Header'
              import Footer from  './components/Footer'
              import Ninjas from './components/Ninjas'

            export default {
              name: 'app',
              components:{

                'app-header':Header,
                'app-footer':Footer,
                'app-ninjas':Ninjas

              },

              data(){

                return {

                  title:"my first vue app",
                }
              }

            }
            </script>


    20.Scoped CSS

    21. Passing Data with Props

        -key

            -vue like to identify each value that it output .that's why it need key for each item

            <div v-for="(friend ,index) in friends" v-bind:key="index">

        -why we need props

            -for passing value from one component to another
            -data sharing across the components
            -props is an array

        -send props
            -we will send data from app.vue to other

                <AllFriends v-bind:nameThatWillReceive="NameOfTheVariable"/>
                or
                <AllFriends :nameThatWillReceive="NameOfTheVariable"/>

                example:
                        <AllFriends :friends="friends"/>



        -revive props

            export default{

                props:['friends']



            }
            -props with type it will be object

                props:{
                friends:array
                }

        -using props

            -using it like normal value

                <div for="(friend,index) in friends" :key="index">
                </div>


        -why we use data binding

            -normally we use data binding for showing dynamic value .Like the variable or attributes that we have in vueJs

                we can not output it on normal way

    ***primitive vs reference type

        -primitive type
            -string
            -boolean
            -numbers

            -explain
                with primitive type it will just change on the component only
        -reference type
            -objects
            -arrays

            -explain
                -when we are sending reference  a props across the the component and after passing that to the component and the change
                it there it will change in the the main component to and also to all the component using this props.

    22. Custom Events

        -why we need it
            -custom events is use for send action from child component to parent component
        -how create and send

            -any action to method

                delete:function(value){

                    this.$emit('nameOftheemit',{param:value,param:value})
                }

        -how to receive and use

            -we will receive from the parent component

                <child-component @nameOftheemit="actionmethod" />

                -this method will have any parenthesis

                methods:{

                    actionmethod:function(payload){

                        action

                            this.friends = this.friends.filter(friend =>{

                                        return friend.name !== payload.name

                                })


                    }

                }

    ***Events (child to parent)
        -why we needs to use Custom events in vue js?

            -when we are using reference type and change a value

        -another way off passing catching event data parameter ***this way does not work in new version***

            <app-data v-on:changeTitle="updateTitle($events)"/>

    ***The Event Bus

        -why we need event bus instead of custom event?

            -when we were using custom events we send back the event to the parent component then we have changed the value
            from the root .But in event but need not to do that .because event bus is global it can listen from anywhere.


        -where to crate event bus
            -we can create event but any where but have to import it from there first.so the best practice is to create it on
            main.js and then import

        -create

            main.js

                const bus = new Vue()

                -so as er can see event bus is just an instance of Vue()
        -using

            -we have to import it first to the component to use it.

                import {bus} from '../main'

            -now on method click we can use it

                methods:{

                    changeTitle:function(){

                        bus.$emit('updateTitle',{param:param})
                    }

                }
        -receive

            -for receiving we have to use lifecycle hook

                -in this case we are using the created()

                    created(){

                        bus.$on('updateTitle',(data)=>{

                        //action goes here

                        })
                    }
    23. Life-cycle Hooks

        -what is life cycle hooks

        -why we need lifecycle hooks ?

        -where life cycle hooks are being created

        -beforeCreate
            -data not accessible
            -events not accessible
            -The beforeCreate hook runs at the very initialization of your component. data has not been made reactive,
             and events have not been set up yet.
         -created
            In the created hook, you will be able to access reactive data and events are active. Templates and Virtual
             DOM have not yet been mounted or rendered.

         -Mounting (DOM Insertion)
            Mounting hooks are often the most-used hooks, for better or worse. They allow you to access your component
             immediately before and after the first render. They do not, however, run during server-side rendering.

            Use if: You need to access or modify the DOM of your component immediately before or after the initial render.

            Do not use if: You need to fetch some data for your component on initialization. Use created
             (or created + activated for keep-alive components) for this instead, especially if you need that data
              during server-side rendering.

        -beforeMount


    ***Slots

        -what is slots

            -slot is a directive for passing html to the child component

        -why we need slots
            -we use prop to send data to parent component to child component.what if we need to pass html elements .in
            that case we use slots.

        -how to use slots

            -we send slots in between the starting tag and ending tag .which means we send in the body of the tag

                <nameOfTheTag>
                    <h1>this is my slot</h1>
                    <p>This is my paragraph</p>
                 </nameOfTheTag>

             -access from the component

                <slot />


        -how to send named slots

            <h1 slot="name">This is my name</h1>

            -access

                <slot name="name"></slot>

        -* if we want to

    **Dynamic Component

        ****when registering component if we follow a convention

            FormOne = (form-one) will be directly generate

        -what is dynamic components

            -is a way to change component in a field

        -why we need dynamic component

            - some time we need to change component back and forth .dynamic component is a way to do that.

        -creating structure for dynamic components

            <component is="nameOfTheComponent"> </component>

        -what is "is" in dynamic component

            -"is" is where we put the component which we want to out put.



        -data binding in "is"

            -we can dynamically change component using data binding

                <component v-bind:is="property">

        -how to get the old value when going back to the previous component

            <keep-alive>
                //component goes here
            </keep-alive>

    ***lazy input binding

        -normally when we write to a form v-model shows us what we write every time.But if we want to write the whole
        thing and then tab we then will see the output

            v-model.lazy="bondin"

    ***checkbox binding

           <label>Ninjas</label>
           <input type="checkbox" value="ninjas" v-model="blog.categories">
           <label>Wizard</label>
           <input type="checkbox" value="wizards" v-model="blog.categories">
           <label>Mario</label>
           <input type="checkbox" value="mario" v-model="blog.categories">
           <label>Cheese</label>
           <input type="checkbox" value="cheese" v-model="blog.categories">


           -blog.categories is an array

    ***select box binding
                    <select v-model="blog.author">
                        <option v-for="author in authors">{{ author}}</option>
                    </select>

    ***Vue JS 2 Tutorial #32 - HTTP Requests

        -installing vue-resource

            -npm install vue-resource --save

        -how to use vue resource

            -first import vue-resource

                import VueResource from 'vue-resource'

            -then activate

                Vue.use(VueResource)

            -json placeholder

            -sending post request

                 post:function () {

                        this.$http.post('https://jsonplaceholder.typicode.com/posts',{

                            title:this.blog.title,
                            body:this.blog.content,
                            userId:2
                        }).then(function (data) {

                            console.log(data)
                            this.submitted = true
                        })

                    }

                -lets mention something,as we have already use vue-resource with Vue.use so we can refer vue-resource as

                'this'

                        this.$http.post('there is the link to post',{object}).promise

    **GET request -with vue resource

        -get request can get value from a database

            -we do fetching on created

                this.$http.get('url').then(function(values){


                }
                )
            -example

                created() {

                    this.$http.get('https://jsonplaceholder.typicode.com/posts').then(function (data) {

                        this.blogs = data.body.slice(0,10)

                    })
                }

    ***custom directives

        -directives fulfill a certain action / design for the element. like v-if ,v-on and so on .we can make custom directive for our own

        -two types of directive is here

            -without parameter

                <div v-rainbow>

                </div>

                -we will make the directives on main.js which will be global

                    Vue.directive('name',{

                        //action goes here
                        bind(el,binding,vnode){

                            el.style.color = "#"+Math.random().toString().slice(2,8);

                        }

                    })
                        -with this directive the element is getting random colors


                    -el
                        is the element where the directive is added

                    -binding

                        is passed parameter


            -with parameter

                <div v-theme="parameter">

                </div>

                -if the parameter is string then pass within a single quote

                    v-theme="'wide'"

                -implement

                    Vue.directive('theme',{

                        bind(el,binding,vnode){

                            if(binding.value == "wide"){

                                el.style.maxWidth = "1200px"

                            }
                            else if(binding.value == "narrow"){

                                el.style.maxWidth = "600px"
                            }

                        }

                    })

            -with argument

                v-theme:column="wide"

                if(binding.arg == "column"){



                }

    ***filters

        - filter are use for changing the output of a data.ite does not change the main data.

            Vue.filters('to-uppercase',function(value){

                return value.toUppercase()

            })

            -use

                {{ blog.title | to-uppercase }}

    ***custom search filter

        -custom filter is not a feature in vue js.its a way of filter data or search data and return to vue.

        -filter code

            computed:{

                    filteredBlogs:function () {

                    return this.blogs.filter((blog) =>{

                        return blog.title.includes(this.search)
                    })
                }

            },

        -vue


            <input type="text" v-model="search" id="search" placeholder="search blogs">

            <div v-rainbow class="single-blog" v-for="(blog,index) in filteredBlogs" v-bind:key="index">

                <h2>{{ blog.title | to-uppercase}}</h2>
                <article>{{blog.body | snippet}}</article>

            </div>

    ***Registering Things Locally

        -when we are using filters and directive globally we register them in main.js.but when the filter and
        directive used in one component only its better to declare them in the same component.

            -filters in this case its a object

                filters:{

                    'to-uppercase':function(value){

                        return ///value
                    },
                    'snippet':function(value){

                        return //value
                    }

                }
                **filter can be declare with out the quote but on those case we can not use '-' like this
                we have to use camelcase and it will act like the same

                    toUppercase = 'to-uppercase'

            -directives

                directives:{

                    'theme':{

                        bind(el,binding,vnode){


                        }

                    }

                }

    *** Mixins

        -mixins are way of reusing codes in different components.

            -declare

                -have to make a js file first

                    export default{

                        computed:{

                            filteredBlogs: function () {

                                return this.blogs.filter((blog) => {

                                    return blog.title.includes(this.search)
                                })

                            }

                        }

                    }

            -use

                -import it first

                    import searchMixins from '../mixins/searchMixins'

                -have to register it(its an array)

                    mixins:[searchMixins,..,..]

                -then

                    use the functionality

    24.Making Requests with Axios

        -what is it

            axios is a promise based HTTP Client for browser and node.js

        -features

            Make XMLHttpRequests from the browser
            Make http requests from node.js
            Supports the Promise API
            Intercept request and response
            Transform request and response data
            Cancel requests
            Automatic transforms for JSON data
            Client side support for protecting against XSRF


        -how to install

            -npm install axios --save

        -running a get request with axios

            -first import it in the component

                import axios from 'axios'

            -if we want to fetch something on page load we will do it on created()

                created(){

                    axios.get('the url').then(response =>{

                        //the code goes here

                        this.posts = response.data

                    });

                }

        -catch in axios

            -we use catch there might be an error running the promise function

                axios.get('url').then((response) =>{

                }).catch(err =>{



                })
Section:4

    25.What is Vue Router

        -install

            -npm install vue-router

        -making a separate file

            import Vue From 'vue'
            import VueRouter from 'vue-router'
            import HelloWorld from './components/HelloWorld'

            Vue.use(VueRouter)

            export default new VueRouter({
                routes:[
                    {
                    path:'/',
                    'name':'helloword'
                    component:Helloworld

                    }
                ]
            })

        -adding to the main.js for global access of router

            import router from './router/index'

            new Vue({

                router

            })

        -and adding the router-view app.vue

            <router-view></router-view>


    28.setting up component
        -what does @ symbol means

            -it means root of the project

                -and here src is the root



    29.Router Links

        -getting all the router links

            -https://stackoverflow.com/questions/36120996/get-all-routes-in-a-vue-router

        -setting up router links

            <router-link to="path"></router-link>

        -setting up named route

            -as we see

                    {
                    path:'/',
                    name:'Home'
                    component:Home

                    }

                -there is name property in the route object if we use this it will work as named route

                    <router-link :to="{name:'Home'}"></router-link>

    30.Route Parameter

        -why we need route parameter

        -how to setup route parameter

            -we will add :parameterName

            -example

                {
                    path:'/profile/:user_id',
                    name:'ViewProfile',
                    component:ViewProfile

                }


        -how to access route parameter

            userId:this.$route.params.userId

    31.Watching the $route Object

       -does not working with watcher but working with computer properties

                    updateId:function () {

                         return this.$route.params.user_id

                    }

    32.more on router links

        -in this we will work with named route with the parameter

            <router-link :to="{name:'about',params:{nameOftheParam:value}}"><router-link>

    33.programmatically Redirecting Users

        -its a way to redirect page from methods

        -redirect to home

            methods:{

                redirectHome:function(){

                    this.$router.push({ name:'nameOfTheRoute' })

                }

            }

        - programmatically go back

            -its access our navigation property from the browser

            methods:{
                goBack:function(){

                    this.$router.go(-1)

                }
            }


        -programmatically forward

            methods:{

                goForward:function(){


                    this.$router.go(1)

                }
            }

    34.Hash vs History



    35.styling active link

        -route-link-exact-active

            -this will show if we are at the exact link

        -router-link-active

            -exact and partial both


section:5 - Project ninja smoothies

    36.Project Preview and Setup

        -create project

            vue create ninja-smoothies

    37.project structure

    38.material design

        -added cdn of materialize css on index

        -added font of google in index

    39.Navbar Component

    40.index component

    41.Deleting(Local) Data

         methods:{
            deleteSmoothie:function (smoothieId) {

              this.smoothies = this.smoothies.filter( (smoothie)=>{

                return smoothie.id != smoothieId


              })

            }
          }

    42.Introduction to Firebase

        -creating a database

           -goto firebase

           - goto console

           -create project
                -give country name and project name

    43.setting up Firebase

        -realtime database

        -goto database section

        -create firestore database

        -start with test mode

        -it will create a database

            -there will be collection like table
            -collection will document like dataset

            -and document will have filed and values

    44.Install Firebase

        -first of all go to the preview of database and collect the
        credentials for it.

        -install firebase

            -npm install firebase --save

        -import firebase

            import firebase from 'firebase'

        -import firestore

            import firestore from 'firebase/firebase'

        -initialize firebase

            const firebaseApp = firebase.initialize(config)

        -timestamps snapshots

            firebaseApp.firestore().settings({ timestampsInSnapshots:true })

        -analytics

            firebaseApp.analytics()

        -lastly we have to export it to be used

            export default firebaseApp.firestore();

    45.Retrieving Firestore Data

        -first import the database part

            import db from '../firebase/init'

        -send a get request to the database from the created lifecycle hook

            db.collection('nameOfTheCollection').get().then(snapshots =>{

                //run foreach
                snapshots.foreach(doc =>{

                    //to collect data
                    doc.data()

                    //to collect id

                    doc.id

                    //adding it to the main array

                    let smoothie = doc.data()

                    smoothie.id = doc.id

                    this.smoothies.push(smoothie)

                })

            })

    **if pull update from github and the package is not here

        npm install --save firebase


    46.Delete Firestore Data

        -we need the id for delete the data

        -need few methods

            -firebase db instance

            -collection() method

            -doc(id) - which will identify the data

            -then the delete() method

            -then we will and a promise next then()
        -delete

            db.collection('smooties').doc(smoothieId).delete().then( ()=>{

                //here the filter for front end

                    this.smoothies = this.smoothies.filter((smoothie)=>{

                        return smoothie.id != smoothieId

                    })

            })

    47.Add Smoothie Component

        ***need to add forward slash every time we are making a route

        -prevent submit

            <form @submit.prevent="addSmoothie0">
            </form>

    48.Adding Ingredients

        - @keyDown.tab=""

        -@keyDown.tab.prevent

            -it will prevent the tabs default behaviour

    49.Out Putting ingredients
            <div v-for="(ing,index) in ingredients" :key="index">

                <label for="ingredient">Ingredient:</label>
                <input type="text" name="ingredient" v-model="ingredients[index]">

            </div>

    50.Saving Records to Firebase

        -in this we use two new things

            -adding post to the firestore

            -adding slug package

        -adding slug

            -npm install slugify

                import slugify from 'slugify'

                this.slug = slugify(this.title,{

                    replacement:'-',
                    remove:/[$*_+~.()'"!\-:@]/g,
                    lower:true
                })

        -add to firestore

            db.collection('smooties').add({

                title:this.title,
                ingredients:this.ingredients,
                slug:this.slug,


            }).then(()=>{
                //redirect
                this.$router.push({ name:'Home' })

            }).catch(err =>{

                console.log(err)
            })

    51.Delete Ingredients

           this.ingredients = this.ingredients.filter( ingredient =>{

               return ingredient != ing

           })

    52.Edit Smoothie Route

        <router-link :to="{name:'EditSmoothie',params:{ smoothie_slug:smoothie.slug }}"><i class="material-icons edit">edit</i></router-link>

    53.Firebase Queries

        -getting data with where clause


           import db from '../firebase/init'

           let ref = db.collection('smooties').where('slug','==',this.$route.params.smoothie_slug)

           //data fetch by get()
           ref.get().then(snapshot =>{

            snapshot.forEach(doc =>{

                //getting the data

                this.smoothie = doc.data()
                //getting the id
                this.smoothie.id = doc.id

            })

           })

   54.Edit Smoothie Form


        -edited the form and method connected to it.

   55.Updating Firestore Records

        - first grab the record from the database using id then update

            db.collection('collectionName').doc(primaryId).update({

                params

            })

        **example
            db.collection('smooties').doc(this.smoothie.id).update({
                    title:this.smoothie.title,
                    ingredients:this.smoothie.ingredients,
                    slug:this.smoothie.slug

            })

   56.Deploy to Firebase

        -first install the firebase-tools
            -npm install -g firebase-tools

        -firebase login

            firebase login

        -firebase init
            -select the project credentials

            -select dist as a folder

        -then firebase deploy

        -before deploy run

            npm run build

        -then firebase deploy

   57.project Review

Section 6:Project Two-Real-Time Chat App

    58.Project Overview & Setup

        -in this project we will be making a realtime chat application with firebase realtime database functionality.

        -creating app

            npm install -g @vue/cli

            vue create ninja-chat

    59.Project structure

    60.FireStore Setup

        -installed firebase
            npm install firebase --save

            import firebase from 'firebase'

            //initialize firebase with config files

                const firebaseApp  = firebase.initializeApp(config)

            //analytics
            firebaseApp.analytics()

        -installed vue-router

            npm install vue-router --save

    61.Making welcome Screen

    62.Passing props via Routes

        -all this time we were passing props via components .now we will do that with routes

            -first have to tell that route that we are gonna pass props

                {

                    path:'/chat',
                    name:'Chat',
                    component:Chat,
                    props:true
                }

                -this props:true is telling the route that we will receive props


            -sending props value via routes
                -its no different from the routes params.actually we send props via our params

                    methods:{

                        enterChat:function(){

                            if(this.name){

                                this.$router.push({ name:'Chat',params:{name:this.name} })

                            }

                        }

                    }

                    -here name is the prop

            -receiving prop

                props:['name']

    63.Route Guards

        -route guards check if certain condition are fulfilled when accessing a route or page

        - we will place route guards on the route page
            index.js

        -declaring a route guard

            -there is many kinds of guard but we will work with 'beforeEnter'

            {
                path:'/chat',
                name:'Chat',
                component:Chat,
                props:true,
                beforeEnter:(to,from,next)=>{

                    if(to.params.name){

                        //next is the next route we are going to redirect
                        next()

                    }else{

                        next({name:'Home'})

                        //we can also enter route name to for redirect

                    }

                }

            }

            -so as we se we have a function which interrupt when we are entering the and check.it have 3 params

                -to
                    -this parameter tells us where we will go and have all the information.
                -from
                    -this tell us where we are from
                -next

                    -this redirect us to the next route

    64.Creating chat window

        -we separate component via its roles .one component one role

    65.New Message Components

        -Date.now() - for timestamps

    66.adding message to firestore

        ***notes
            -first if we don't have a database table created but if we name one and add a data it will create one first and then insert that
            data.

            -when we press enter . it will work as a button submit.

        -add a data to firebase

            -import db first

                import db from '../firebase/init'

            -create a method

                addMessage:function(){

                    db.collection('messages').add({

                        content:this.newMessage,
                        name:this.name,
                        timestamp:Date.now()

                    }).catch(err =>{

                        console.log(err)

                    })

                }


    67.Real-Time Events (events listeners)

        -we make listener in created life cycle hook so that if data changes in a table that we selected gives us a instant feed back.

        -import db

            import db from '../firebase/init'

        -created life cycle hook

            created(){



            }

        -fetch from database

            //getting data
            let ref = db.collection('messages').orderBy('timestamp');

            //taking snapshot
            ref.onSnapshot(snapshot =>{
                //getting only the changes
                snapshot.docChanges().forEach(change =>{

                    if(change.type =='added'){

                        let doc = change.doc

                        this.messages.push({

                            id:doc.id,
                            name:doc.data().name,
                            content:doc.data().content,
                            timestamp:doc.data().timestamp,
                        })

                    }

                })

            })

        -onSnapshot()

            -this method take a snapshot whenever anything change on database

        -docChanges

            -this method only out put the data which are changes only

        -type added

            -we will look at the changes but changes can be updated or deleted type .but change.type == 'added' means only those which
            are added.

        -orderBy

            -order define oder by a field


    68.Format Times with Moment.js

        -moment is a package for formatting time to human readable format

        -install

            npm install moment --save

        -use
            import moment from 'moment'

            moment(time).format(format)

    69.Auto Scrolling

        -install

            npm install vue-chat-scroll --save

        -import

            import VueChatScroll from 'vue-chat-scroll'

            Vue.use(VueChatScroll)
        -use

            <div class="messages" vue-chat-scroll>

            </div>


    70.deploy app

        https://medium.com/@ShayneOSullivan/deploy-a-vue-js-app-with-firebase-hosting-3fc420cf3998

        -install firebase tools if you don't have one

            npm install -g firebase-tools

        -login to the firebase

            firebase login

        -now configure the project to firebase with

            firebase init

        -build you app

            npm run build

        -deploy to firebase

            firebase deploy

    71.Project Review


Section 7:Project Three - Geo Ninja
    72.Project Overview & Setup

        -installing without eslint
        -vue router

    73.Project Structure

        -signup
        -login
        -protect
            -map.vue
            -profile.vue
        -setup vue-router


    74.setting up firebase

        -npm install firebase

        -setup

            -import firebase from 'firebase'
            -copy config file from firestore database
            -
                const firebaseApp = firebase.initialize(config)
                firebase.analytics()

                export default firebaseApp.firestore()


    75.navbar component

    76.map component

    77.Google Maps Api

        -go to google

            https://console.developers.google.com/apis/dashboard

        -billing account

        -enable api and services
            -google maps javascript api

                enable
            -go to credentials

                -create credentials

                -get  a api key
        -setup guide

    ***auth from youtube net ninja -Firebase Auth Tutorial

        1.introduction

        2.How firebase auth works

            -first it submit its credentials at the server and the server reply with a verification token

            -first make a data base
            -then enable authentication with email and password
            -enable database too




